plugins {
    id 'java'
    id 'application'
}

ext {
    lombokVersion = '1.18.32'
    junitVersion = '5.8.1'
}

group = 'sgs.js.common'
version = '0.0.1-SNAPSHOT'

// plugin: java
compileJava {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    options.encoding = 'UTF-8'
}

// plugin: application
application {
    applicationDefaultJvmArgs = ['-Xmx1024k', '-Xms1024k']
}

repositories {
    mavenCentral()
}

test {
    useJUnitPlatform()
}

sourceSets {
    api {
        java {
            srcDirs = ['src/api/java']
        }
    }
    impl {
        java {
            srcDirs = ['src/impl/java']
        }
    }
    apiTest {
        java {
            srcDirs = ['src/apiTest/java']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

//    testImplementation 'org.junit.jupiter:junit-jupiter'

dependencies {
    // настройка зависимостей для имплиментации
    // - lombok
    implCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    implAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    // - api
    implImplementation sourceSets.api.output

    // настройка зависимостей для абстрактных тестов api
    // - lombok
    apiTestCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    apiTestAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    // - junit
    apiTestImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    // - api
    apiTestImplementation sourceSets.api.output

    // настройка зависимостей для тестов имплементации
    // - lombok
    apiTestCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    apiTestAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    // - junit
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    // - api
    testImplementation sourceSets.api.output
    // - apiTest
    testImplementation sourceSets.apiTest.output
    // - implementation
    testImplementation sourceSets.impl.output
}


// Задача для сборки JAR для api
task apiJar(type: Jar) {
    from sourceSets.api.output
    archiveBaseName.set('common-api')
    archiveVersion.set(version)
}

// Задача для сборки JAR для impl
task implJar(type: Jar) {
    from sourceSets.impl.output
    archiveBaseName.set('common-impl')
    archiveVersion.set(version)
}

// Задача для сборки JAR для apiTest
task apiTestJar(type: Jar) {
    from sourceSets.apiTest.output
    archiveBaseName.set('common-api-test')
    archiveVersion.set(version)
}

// Задача для сборки всех JAR
task buildAllJars {
    group = "app"
    dependsOn apiJar, implJar
}

task configureGit {
    doLast {
        def configFile = new File("${projectDir}/.git/config")
        if (!configFile.exists()) {
            throw new GradleException(".git/config file not found")
        }

        // Чтение и парсинг файла
        def gitConfig = [:]
        String currentSection = null

        configFile.eachLine { line ->
            line = line.trim()

            // Обработка секции [section]
            if (line.startsWith('[') && line.endsWith(']')) {
                currentSection = line.substring(1, line.length() - 1)
                gitConfig[currentSection] = [:]
            }
            // Обработка ключ=значение (только если мы внутри секции)
            else if (currentSection != null && line.contains('=')) {
                def parts = line.split('=', 2)
                gitConfig[currentSection][parts[0].trim()] = parts[1].trim()
            }
        }

        println "Original config:"
        println gitConfig

        println ''
        println 'Start editing config:'

        if(!gitConfig['core']) gitConfig['core'] = [:]
        gitConfig['core']['hooksPath'] = '.githooks'
        println 'core.hooksPath = .githooks'

        if(!gitConfig['merge']) gitConfig['merge'] = [:]
        gitConfig['merge']['ff'] = 'false'
        println 'merge.ff = false'

        println ''
        println "New config:"
        println gitConfig

        // Сериализация обратно в файл
        def newConfigContent = new StringBuilder()

        gitConfig.each { section, entries ->
            newConfigContent << "[$section]\n"
            entries.each { key, value ->
                newConfigContent << "\t$key = $value\n"
            }
        }

        // Запись в файл
        configFile.text = newConfigContent.toString()
        println "Git config updated successfully"
    }
}

task configure {
    group = "app"
    dependsOn configureGit
}
